#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTPS —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±-AR
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
"""

import sys
import os
import ssl
import socket
import webbrowser
from http.server import HTTPServer, SimpleHTTPRequestHandler
from threading import Timer

def get_local_ip():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except:
        return "127.0.0.1"

def create_simple_ssl_cert():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    cert_file = 'cert.pem'
    key_file = 'key.pem'
    
    if os.path.exists(cert_file) and os.path.exists(key_file):
        print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return cert_file, key_file
    
    try:
        import subprocess
        
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        cmd = [
            'openssl', 'req', '-x509', '-newkey', 'rsa:4096', '-keyout', key_file,
            '-out', cert_file, '-days', '365', '-nodes', '-subj',
            f'/C=RU/ST=AR/L=AR/O=WebAR/CN={get_local_ip()}'
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω!")
            return cert_file, key_file
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {result.stderr}")
            return None, None
            
    except FileNotFoundError:
        print("‚ùå OpenSSL –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç...")
        return create_builtin_cert()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None, None

def create_builtin_cert():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ Python"""
    cert_file = 'cert.pem'
    key_file = 'key.pem'
    
    # –ü—Ä–æ—Å—Ç–æ–π —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è localhost
    cert_content = """-----BEGIN CERTIFICATE-----
MIIDXTCCAkWgAwIBAgIJAKlgEQVX8VNnMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
aWRnaXRzIFB0eSBMdGQwHhcNMjMwMTAxMDAwMDAwWhcNMjQwMTAxMDAwMDAwWjBF
MQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50
ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
CgKCAQEA2l8cIJKtJKfCGj2TQ4sDpMLZwC4RV7VU1Tc2Fa8cO8nRkOmRNQdR+UM4
F8mGZzl+4vA6Q6jHzqOzZgTKZqRNJK6aQY8KxXkqH+EkTCdAhkZFU7oKmBJq3F4X
N1n8KzYhP8D7TgJ6L+1oZLs5U4gW+q2KqGnF7Y+4PzRr8c+N9J4nY7L7zFq5L7zF
A0GCSqGSIb3DQEJBQcwLgEBMAswCQYDVQQGEwJBVTEKMA8GA1UECAwISG9tZWxh
bmQKMA0GCSqGSIb3DQEBCwUAA4IBAQAKz6vHzqOzZgTKZqRNJK6aQY8KxXkqH
-----END CERTIFICATE-----"""

    key_content = """-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDaXxwgkq0kp8Ia
PZNDiwOkwtnALhFXtVTVNzYVrxw7ydGQ6ZE1B1H5QzgXyYZnOX7i8DpDqMfOo7Nm
BMpmpE0krppBjwrFeSof4SRMJ0CGRkVTugqYEmrcXhc3WfwrNiE/wPtOAnov7Whk
uzlTiBb6rYqoacXtj7g/NGvxz430nidjsvvMWrkvvMUDQYJKoZIhvcNAQkFFxwLA
DEwCwYJKoZIhvcNAQkBBQAwLgEBMAswCQYDVQQGEwJBVTEKMA8GA1UECAwISG9t
ZWxhbmQKMA0GCSqGSIb3DQEBCwUAA4IBAQAKz6vHzqOzZgTKZqRNJK6aQY8KxXkq
-----END PRIVATE KEY-----"""

    try:
        with open(cert_file, 'w') as f:
            f.write(cert_content)
        with open(key_file, 'w') as f:
            f.write(key_content)
        
        print("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω")
        return cert_file, key_file
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {e}")
        return None, None

class HTTPSHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        # CORS –∏ –∫–∞–º–µ—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.send_header('Permissions-Policy', 'camera=*, microphone=*')
        self.send_header('Feature-Policy', 'camera *; microphone *')
        super().end_headers()
    
    def log_message(self, format, *args):
        user_agent = self.headers.get('User-Agent', '')
        device_type = "üì±" if any(mobile in user_agent.lower() for mobile in ['mobile', 'android', 'iphone']) else "üíª"
        print(f"{device_type} {self.address_string()} - {format % args}")

def open_browser(url):
    print(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä: {url}")
    webbrowser.open(url)

def start_https_server():
    port = 8443
    local_ip = get_local_ip()
    https_url = f"https://{local_ip}:{port}"
    localhost_url = f"https://localhost:{port}"
    
    print("=" * 60)
    print("üîí HTTPS AR –°–µ—Ä–≤–µ—Ä")
    print("=" * 60)
    print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üåê IP –∞–¥—Ä–µ—Å: {local_ip}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    cert_file, key_file = create_simple_ssl_cert()
    if not cert_file or not key_file:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å OpenSSL –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—ã—á–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä")
        return
    
    print("üåç HTTPS –∞–¥—Ä–µ—Å–∞:")
    print(f"   üíª –õ–æ–∫–∞–ª—å–Ω—ã–π: {localhost_url}")
    print(f"   üì± –ú–æ–±–∏–ª—å–Ω—ã–π: {https_url}")
    print()
    
    print("üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ:")
    print(f"   1. –û—Ç–∫—Ä–æ–π—Ç–µ: {https_url}/debug.html")
    print("   2. –ë—Ä–∞—É–∑–µ—Ä –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ")
    print("   3. –ù–∞–∂–º–∏—Ç–µ '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ' -> '–í—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–π—Ç–∏'")
    print("   4. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ")
    print()
    
    print("üî¥ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 60)
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
        httpd = HTTPServer(('0.0.0.0', port), HTTPSHandler)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL
        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        context.load_cert_chain(cert_file, key_file)
        httpd.socket = context.wrap_socket(httpd.socket, server_side=True)
        
        print(f"üü¢ HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        print()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        Timer(2.0, open_browser, [localhost_url]).start()
        
        httpd.serve_forever()
        
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ü–æ—Ä—Ç 8443 —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º")

if __name__ == "__main__":
    start_https_server() 